import LeanCourse.Common
import LeanCourse.DiffGeom
import Mathlib.Analysis.Normed.Field.Basic
import Mathlib.Geometry.Manifold.ChartedSpace
import Mathlib.Topology.Basic
import Mathlib.Geometry.Manifold.SmoothManifoldWithCorners
import Mathlib.Geometry.Euclidean.Basic
import Mathlib.Geometry.Manifold.MFDeriv
import Mathlib.Topology.Compactness.Paracompact
import Mathlib.Topology.Metrizable.Urysohn
import Mathlib.Geometry.Manifold.VectorBundle.Tangent
import Mathlib.Geometry.Manifold.ContMDiff
import Mathlib.LinearAlgebra.TensorProduct

/-First of all let us give the notions for manifolds in library.-/

#check LocalEquiv
#check SmoothManifoldWithCorners
#check ChartedSpace
#check TangentSpace



/-Manifold without boundary-/
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {I : ModelWithCorners ‚Ñù E E} [I.Boundaryless] {M : Type*} [TopologicalSpace M] [ChartedSpace E M] [SmoothManifoldWithCorners I M]

theorem ModelWithCornerss.ext{ùïú : Type u_1} :
‚àÄ {inst : NontriviallyNormedField ùïú} {E : Type u_2} {inst_1 : NormedAddCommGroup E} {inst_2 : NormedSpace ùïú E}
  {H : Type*} {inst_3 : TopologicalSpace H} (x y : ModelWithCorners ùïú E H),
  ‚Üëx.toLocalEquiv = ‚Üëy.toLocalEquiv ‚Üí x.invFun = y.invFun ‚Üí x.source = y.source ‚Üí x.target = y.target ‚Üí x = y := by
  exact fun {inst} {E} {inst_1} {inst_2} {H} {inst_3} x y a a_1 a_2 a_3 ‚Ü¶
    ModelWithCorners.ext x y (congrArg LocalEquiv.toFun a) a_1 a_2 a_3

/-Manifolds are perfect objects because one can always equip them with a metric-/
theorem ManifoldWithCorners.metrizableSpace{E : Type u_1} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {H : Type u_2} [TopologicalSpace H] (I : ModelWithCorners ‚Ñù E H) (M : Type*) [TopologicalSpace M] [ChartedSpace H M] [SigmaCompactSpace M] [T2Space M] :
TopologicalSpace.MetrizableSpace M := by
  haveI := I.locallyCompactSpace; haveI := ChartedSpace.locallyCompactSpace H M
  haveI := I.secondCountableTopology
  haveI := ChartedSpace.secondCountable_of_sigma_compact H M
  exact TopologicalSpace.metrizableSpace_of_t3_second_countable M

/- Property ensuring that the model with corners `I` defines manifolds without boundary. -/
#check ModelWithCorners.Boundaryless

/- Let's define the Riemannian metric structure -/

variable (M I) in
class RiemannianMetric  where
  (metric : M ‚Üí (SmoothSection I E (TangentSpace I (M := M))) ‚Üí (SmoothSection I E (TangentSpace I (M := M))) ‚Üí ‚Ñù)
  (symmetry : ‚àÄ (x : M) (v w : SmoothSection I E (TangentSpace I (M := M))), metric x v w = metric x w v)
  (positive_definite : ‚àÄ (x : M) (v : SmoothSection I E (TangentSpace I (M := M))), v ‚â† 0 ‚Üí metric x v v > 0)
  (zero_at_zero : ‚àÄ (x : M) , metric x 0 0 = 0)
  (linearity : ‚àÄ (x : M) (a : ‚Ñù ) ( u w : SmoothSection I E (TangentSpace I (M := M))), metric x (a‚Ä¢u) w= a * metric x u w)
  (linearity2 : ‚àÄ (x : M) ( u v w : SmoothSection I E (TangentSpace I (M := M))), metric x (u+v) w= metric x u w + metric x v w)

open RiemannianMetric

/-Pointwise Riemmannian metric-/
variable [g : RiemannianMetric I M] in
def PtWiseMetric (X Y : SmoothSection I E (TangentSpace I (M := M))) : M ‚Üí ‚Ñù :=
  fun x ‚Ü¶ metric x X Y

/-We need to define multiplication of a smooth seciton and function as in lean it did not defined.-/
noncomputable section
open Manifold Bundle Filter
variable (f : C^‚ä§‚üÆI, M; ùìò(‚Ñù , ‚Ñù ), ‚Ñù‚üØ) (x : M)
instance : SMul (C^‚ä§‚üÆI, M; ùìò(‚Ñù, ‚Ñù), ‚Ñù‚üØ) (SmoothSection I E (TangentSpace I (M := M))) := by
  refine' ‚ü®fun f X ‚Ü¶ ‚ü®fun x ‚Ü¶ f x ‚Ä¢ X x, _‚ü©‚ü©
  intro x‚ÇÄ
  have hX := X.contMDiff x‚ÇÄ
  rw [contMDiffAt_section] at hX ‚ä¢
  set V := TangentSpace I (M := M)
  set e := trivializationAt E V x‚ÇÄ
  refine' ((f.2 x‚ÇÄ).smul hX).congr_of_eventuallyEq _
  refine' eventually_of_mem (e.open_baseSet.mem_nhds <| mem_baseSet_trivializationAt E V x‚ÇÄ) _
  intro x hx
  apply (e.linear ‚Ñù hx).2

/-This multiplication gives a smooth section-/
example (X : SmoothSection I E (TangentSpace I (M := M))) :
    SmoothSection I E (TangentSpace I (M := M)) := f ‚Ä¢ X

#check HSMul


/-Now let us define connection on a manifold-/
variable (M I) in
class Connection where
  (conn : SmoothSection I E (TangentSpace I (M := M))‚Üí SmoothSection I E (TangentSpace I (M := M)) ‚Üí SmoothSection I E (TangentSpace I (M := M)))
  (linear_first_arg : ‚àÄ (a : C^‚ä§‚üÆI, M; ùìò(‚Ñù , ‚Ñù ), ‚Ñù‚üØ) (X Y : SmoothSection I E (TangentSpace I (M := M))), conn (a ‚Ä¢ X) Y= a ‚Ä¢ conn X Y )
  (linear_first_arg2 : ‚àÄ (X Y Z : SmoothSection I E (TangentSpace I (M := M))), conn (X+Y) Z= conn X Z + conn Y Z)
  (linear_second_arg : ‚àÄ (X Y Z: SmoothSection I E (TangentSpace I (M := M)))(a : ‚Ñù), conn X (a‚Ä¢ Y+Z)=a ‚Ä¢ (conn X Y)+conn X Z)
  (leibniz_rule : ‚àÄ (x: M)(X Y : SmoothSection I E (TangentSpace I (M := M)) )(f : C^‚ä§‚üÆI, M; ùìò(‚Ñù , ‚Ñù ), ‚Ñù‚üØ), conn X (f ‚Ä¢ Y) = f ‚Ä¢ conn X Y + (mfderiv I ùìò(‚Ñù, ‚Ñù) f x (X x) ‚Ä¢ Y ) )

notation "‚àá_" => Connection.conn

variable [Connection I M]
example (X Y : SmoothSection I E (TangentSpace I (M := M))) : SmoothSection I E (TangentSpace I (M := M)) :=
  ‚àá_ X Y - ‚àá_ Y X

/-Lie bracket structure-/
variable (M I) in
class LieBracket where
  (bracket : SmoothSection I E (TangentSpace I (M := M))‚Üí SmoothSection I E (TangentSpace I (M := M)) ‚Üí  SmoothSection I E (TangentSpace I (M := M)))
  (antisymmetry : ‚àÄ (X Y : SmoothSection I E (TangentSpace I (M := M))) ,bracket X Y = -bracket Y X )
  (Jacobi_identity : ‚àÄ (X Y Z : SmoothSection I E (TangentSpace I (M := M))) , bracket X (bracket Y Z) + bracket Y (bracket Z X) + bracket Z (bracket X Y) = 0)
  (linearity : ‚àÄ (a b : ‚Ñù) (X Y Z : SmoothSection I E (TangentSpace I (M := M))), bracket (a‚Ä¢X+b‚Ä¢Y) Z =a ‚Ä¢ bracket X Z + b ‚Ä¢ bracket Y Z)
  (product : ‚àÄ (x : M) (X Y : SmoothSection I E (TangentSpace I (M := M))) (f : C^‚ä§‚üÆI, M; ùìò(‚Ñù , ‚Ñù ), ‚Ñù‚üØ), bracket X (f ‚Ä¢ Y)= f ‚Ä¢ bracket X Y + (mfderiv I ùìò(‚Ñù, ‚Ñù) f x (X x) ‚Ä¢ Y ))

variable (M I) in
instance [brack : LieBracket I M] : Bracket ( SmoothSection I E (TangentSpace I (M := M))) ( SmoothSection I E (TangentSpace I (M := M))):= by {
  exact ‚ü®LieBracket.bracket‚ü©
}

#check Bracket
#check Connection
#check LieBracket

/-Torsion tensor in order to define Levi Civita connection-/
variable [conn : Connection I M] [brack : LieBracket I M]
def TorsionTensor (X Y : SmoothSection I E (TangentSpace I (M := M))) : SmoothSection I E (TangentSpace I (M := M)) :=
  ‚àá_ X Y - ‚àá_ Y X - ‚ÅÖ X, Y‚ÅÜ

/-Levi Civita Connection as a definition-/
variable (M I)  in
class LeviCivitaConnection [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] where
  (connection : SmoothSection I E (TangentSpace I (M := M))‚Üí SmoothSection I E (TangentSpace I (M := M)) ‚Üí SmoothSection I E (TangentSpace I (M := M)))
  (linear_first_arg : ‚àÄ (a : C^‚ä§‚üÆI, M; ùìò(‚Ñù , ‚Ñù ), ‚Ñù‚üØ) (X Y : SmoothSection I E (TangentSpace I (M := M))), connection (a ‚Ä¢ X) Y= a ‚Ä¢ connection X Y)
  (linear_first_arg2 : ‚àÄ (X Y Z : SmoothSection I E (TangentSpace I (M := M))), connection (X+Y) Z= (connection X Z)+connection Y Z)
  (linear_second_arg : ‚àÄ (X Y Z: SmoothSection I E (TangentSpace I (M := M))) (a : ‚Ñù), connection X (a‚Ä¢ Y+Z)=a ‚Ä¢ (connection X Y)+connection X Z)
  (leibniz_rule : ‚àÄ (x: M)(X Y : SmoothSection I E (TangentSpace I (M := M)) )(f : C^‚ä§‚üÆI, M; ùìò(‚Ñù , ‚Ñù ), ‚Ñù‚üØ), connection X (f ‚Ä¢ Y) = f ‚Ä¢ connection X Y + (mfderiv I ùìò(‚Ñù, ‚Ñù) f x (X x) ‚Ä¢ Y ) )
  (metric_compatible : ‚àÄ (x : M) (X Y Z : SmoothSection I E (TangentSpace I (M := M))),  (mfderiv I ùìò(‚Ñù, ‚Ñù) (PtWiseMetric X Y) x (Z x))= metric x (conn.conn Z X) Y+ metric x X (conn.conn Z Y))
  (torsion_free : ‚àÄ (X Y : SmoothSection I E (TangentSpace I (M := M))), TorsionTensor X Y = 0)


notation "‚àá_LC" => LeviCivitaConnection.connection

/-Showing Levi Civita connection is a connection-/
variable [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M]
instance (nabla : LeviCivitaConnection I M) : Connection I M where
conn := by exact ‚àá_LC
linear_first_arg := by exact nabla.linear_first_arg
linear_first_arg2 := by exact nabla.linear_first_arg2
linear_second_arg := by exact nabla.linear_second_arg
leibniz_rule := by exact nabla.leibniz_rule




/-In few examples and lemmas one can find some necessary basic properties for our future formalizations
Most of are direct conclusions of properties of concepts we gave so far.-/
example [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (Y : SmoothSection I E (TangentSpace I (M := M))) :
 ‚àá_LC 0 Y = 0 := by {
  have : ‚àá_LC 0 Y = ‚àá_LC (0 ‚Ä¢ Y) Y := by simp
  calc ‚àá_LC (0 ‚Ä¢ Y) Y = 0 ‚Ä¢ ‚àá_LC Y Y := by{
    rw [‚Üê @ofNat_zsmul]
    sorry
  }
                                _= 0 := rfl
 }
lemma ex1 [brack: LieBracket I M] (X Y : SmoothSection I E (TangentSpace I (M := M))) : ‚ÅÖ X,Y‚ÅÜ= -1 ‚Ä¢ brack.bracket Y X := by{
  rw[LieBracket.antisymmetry]
  simp
  exact rfl
}

lemma ex2 [g : RiemannianMetric I M] (X Y : SmoothSection I E (TangentSpace I (M := M)) ) : metric x (-X) Y =-metric x X Y := by{
  have lem1 : -X=-1 ‚Ä¢ X := by exact (neg_one_zsmul X).symm
  calc metric x (-X) Y = metric x (-1 ‚Ä¢ X) Y := by rw [lem1]
                      _ = -1 * metric x X Y:= by{
                        rw [‚Üê@RiemannianMetric.linearity]
                        simp
                      }
                      _ = -metric x X Y := by simp

}


lemma ex3 [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (X Y Z : SmoothSection I E (TangentSpace I (M := M))) :
‚àá_LC (-X) Y = - ‚àá_LC X Y := by{



  calc ‚àá_LC (-X) Y = ‚àá_LC (-1 ‚Ä¢ X) Y := by simp
                              _ = -1 ‚Ä¢ ‚àá_LC X Y := by{
                              rw [@neg_one_zsmul]
                              rw [@neg_one_zsmul]
                              rw [@eq_neg_iff_add_eq_zero]
                              rw [‚Üê @LeviCivitaConnection.linear_first_arg2]
                              simp
                              let P : SmoothSection I E (TangentSpace I (M := M)) := by exact X
                              have : ‚àá_LC 0 Y = ‚àá_LC (0 ‚Ä¢ P) Y := rfl
                              rw[this]
                              sorry

                              }
                              _ = - ‚àá_LC X Y := by simp
}

lemma ex4 (g : RiemannianMetric I M) (X : SmoothSection I E (TangentSpace I (M := M)) ) : metric x 0 X=0 := by{
  calc metric x 0 X = metric x (0 ‚Ä¢ X) X := by exact rfl
                      _= 0* metric x X X := by {
                        rw[‚Üêg.linearity]
                        simp
                      }
                      _=0 := by simp
}









/-Riemann curvature tensor of type (3,1)-/

variable [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] in
def CurvatureTensor31 (X Y Z: SmoothSection I E (TangentSpace I (M := M))) : SmoothSection I E (TangentSpace I (M := M)) :=
  ‚àá_LC X (‚àá_LC Y Z) - ‚àá_LC Y (‚àá_LC X Z) - ‚àá_LC (‚ÅÖ X,Y ‚ÅÜ) Z





/-Some properties of Riemmann curvature tensor.-/
variable (x : M) [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] in
lemma prop1_R31 (X Y Z : SmoothSection I E (TangentSpace I (M := M))) (f : C^‚ä§‚üÆI, M; ùìò(‚Ñù , ‚Ñù ), ‚Ñù‚üØ) : CurvatureTensor31 X (f ‚Ä¢ Y) Z=f ‚Ä¢ CurvatureTensor31 X Y Z := by{
  rw[CurvatureTensor31]
  sorry

}






/- Riemann curvature tensor of type (4,0) -/

variable [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] in
def CurvatureTensor40 (X Y Z W : SmoothSection I E (TangentSpace I (M := M))) : ‚Ñù :=
  metric x (CurvatureTensor31 X Y Z) W









/-Main Theorems we aim to prove-/

/- R(X,Y,Z,W)=-R(Y,X,Z,W)    -/
lemma SkewSymR401 [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (x : M) (X Y Z W : SmoothSection I E (TangentSpace I (M := M)))
: CurvatureTensor40 x X Y Z W = - CurvatureTensor40 x Y X Z W := by
{
  rw[CurvatureTensor40]
  rw[CurvatureTensor40]
  rw[CurvatureTensor31]
  have : ‚àá_LC (‚ÅÖ X,Y‚ÅÜ) Z = - ‚àá_LC (brack.bracket Y X) Z :=by{
    rw[brack.antisymmetry]
    rw[ex3]
    exact neg_eq_iff_eq_neg.mp rfl
    exact X
  }
  rw[this]
  simp
  rw[‚Üêex2]
  have : (‚àá_LC X (‚àá_LC Y Z) -
        ‚àá_LC Y (‚àá_LC X Z) +
      ‚àá_LC (LieBracket.bracket Y X) Z) = -CurvatureTensor31 Y X Z := by{
        rw [@sub_add]
        rw[CurvatureTensor31]
        congr
        simp
        rw [@sub_eq_sub_iff_sub_eq_sub]
        simp
        exact rfl
      }

  rw [this]
}

lemma SkewSymR402 [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (x : M) (X Y Z W : SmoothSection I E (TangentSpace I (M := M))) : CurvatureTensor40 x X Y Z W = - CurvatureTensor40 x X Y W Z := by sorry

lemma SymInR40 [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (x : M) (X Y Z W : SmoothSection I E (TangentSpace I (M := M))) :
 CurvatureTensor40 x X Y Z W = CurvatureTensor40 x Y X W Z  := by {
  rw[SkewSymR401]
  rw[SkewSymR402]
  simp
 }


lemma BianchiR31 [g : RiemannianMetric I M]  [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (x : M) (X Y Z : SmoothSection I E (TangentSpace I (M := M))) : CurvatureTensor31 X Y Z + CurvatureTensor31 Y Z X + CurvatureTensor31 Z X Y = 0 := by{
  rw[CurvatureTensor31]
  rw[CurvatureTensor31]
  rw[CurvatureTensor31]
  have : TorsionTensor X Y = 0 := by {
      rw[nabla.torsion_free]
  }
  calc ‚àá_LC X (‚àá_LC Y Z) -
          ‚àá_LC Y (‚àá_LC X Z) -
        ‚àá_LC (LieBracket.bracket X Y) Z +
      (‚àá_LC Y (‚àá_LC Z X) -
          ‚àá_LC Z (‚àá_LC Y X) -
        ‚àá_LC (LieBracket.bracket Y Z) X) +
    (‚àá_LC Z (‚àá_LC X Y) -
        ‚àá_LC X (‚àá_LC Z Y) -
      ‚àá_LC (LieBracket.bracket Z X) Y) = ‚àá_LC X (‚àá_LC Y Z-‚àá_LC Z Y)+ ‚àá_LC Y (‚àá_LC X Z-‚àá_LC Z X)+ ‚àá_LC Z (‚àá_LC Y X-‚àá_LC X Y)-‚àá_LC (‚ÅÖ X,Y‚ÅÜ) Z-‚àá_LC (brack.bracket Y Z) X-‚àá_LC (brack.bracket Z X) Y := sorry
      _=‚àá_LC X (brack.bracket Y Z)+ ‚àá_LC Y (brack.bracket X Z)+‚àá_LC Z (brack.bracket Y X)-‚àá_LC (‚ÅÖ X,Y‚ÅÜ) Z-‚àá_LC (brack.bracket Y Z) X-‚àá_LC (brack.bracket Z X) Y := sorry
      _=0 := sorry
}

lemma BianchiR40 [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (x : M) (X Y Z W : SmoothSection I E (TangentSpace I (M := M))) :
 CurvatureTensor40 x X Y Z W + CurvatureTensor40 x Y Z X W + CurvatureTensor40 x Z X Y W = 0 := by{
  rw[CurvatureTensor40]
  rw[CurvatureTensor40]
  rw[CurvatureTensor40]
  calc metric x (CurvatureTensor31 X Y Z) W +
      metric x (CurvatureTensor31 Y Z X) W +
    metric x (CurvatureTensor31 Z X Y) W = metric x ((CurvatureTensor31 X Y Z)+(CurvatureTensor31 Y Z X)+(CurvatureTensor31  Z X Y)) W := by {
      rw[‚Üêg.linearity2]
      rw[‚Üêg.linearity2]
    }
                                                                              _=metric x 0 W := by rw [BianchiR31 x X Y Z]
                                                                              _= 0 := by exact ex4 x g W
}


lemma MainSymR40 [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] (x : M) (X Y Z W : SmoothSection I E (TangentSpace I (M := M))) :
 CurvatureTensor40 x X Y Z W =CurvatureTensor40 x  Z W X Y := by{
  have Bianchi1 :  CurvatureTensor40 x X Y Z W + CurvatureTensor40 x   Y Z X W + CurvatureTensor40 x  Z X Y W = 0 := by exact BianchiR40  x X Y Z W
  have Bianchi2 :  CurvatureTensor40 x Y Z W X+ CurvatureTensor40 x   Z W Y X + CurvatureTensor40 x  W Y Z X = 0 := by exact  BianchiR40  x Y Z W X
  have Bianchi3 :  CurvatureTensor40 x  Z W X Y + CurvatureTensor40 x  W X Z Y + CurvatureTensor40 x  X Z W Y = 0 := by exact  BianchiR40  x Z W X Y
  have Bianchi4 :  CurvatureTensor40 x  W X Y Z + CurvatureTensor40 x   X Y W Z + CurvatureTensor40 x  Y W X Z = 0 := by exact  BianchiR40  x W X Y Z
  have SummAllBianchi : CurvatureTensor40 x  X Y Z W + CurvatureTensor40 x   Y Z X W + CurvatureTensor40 x  Z X Y W + CurvatureTensor40 x  Y Z W X+ CurvatureTensor40 x   Z W Y X + CurvatureTensor40 x  W Y Z X+CurvatureTensor40 x  Z W X Y + CurvatureTensor40 x  W X Z Y + CurvatureTensor40 x  X Z W Y+CurvatureTensor40 x  W X Y Z + CurvatureTensor40 x   X Y W Z + CurvatureTensor40 x  Y W X Z=0 := by {
    rw[Bianchi1]
    simp
    rw[Bianchi2]
    simp
    rw[Bianchi3]
    simp
    rw[Bianchi4]
  }
  have OtherPerspectiveBianchi : CurvatureTensor40 x  X Y Z W + CurvatureTensor40 x   Y Z X W + CurvatureTensor40 x  Z X Y W + CurvatureTensor40 x  Y Z W X+ CurvatureTensor40 x   Z W Y X + CurvatureTensor40 x  W Y Z X+CurvatureTensor40 x  Z W X Y + CurvatureTensor40 x  W X Z Y + CurvatureTensor40 x  X Z W Y+CurvatureTensor40 x  W X Y Z + CurvatureTensor40 x   X Y W Z + CurvatureTensor40 x  Y W X Z= 2* CurvatureTensor40 x  X Y Z W- 2* CurvatureTensor40 x  Z W X Y := by{
   sorry
  }
  have MergeTogether : 2* CurvatureTensor40 x  X Y Z W- 2* CurvatureTensor40 x  Z W X Y =0 := by{
    rw[‚ÜêOtherPerspectiveBianchi]
    rw[SummAllBianchi]
  }
  have : CurvatureTensor40 x  X Y Z W= CurvatureTensor40 x  Z W X Y  := sorry
  exact this
}



/-Definition of flat manifold.-/
variable [g : RiemannianMetric I M] [conn : Connection I M] [brack: LieBracket I M] [nabla : LeviCivitaConnection I M] in
structure FlatManifold where
(condition : ‚àÄ (x : M) (X Y Z W : SmoothSection I E (TangentSpace I (M := M))) , CurvatureTensor40 x X Y Z W=0)
